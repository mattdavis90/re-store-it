#!/usr/bin/env python

import argparse
import sys
import importlib
import logging
import signal
import threading
from time import sleep

VERSION = 'v1.0.0'

class ReStoreIt(object):
    def __init__(self, argv):
        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument('-V', '--version', action='version', version='%(prog)s ' + VERSION)
        parser.add_argument('-v', '--verbose', action='store_const', default='INFO', const='DEBUG')
        parser.add_argument('--log-file', dest='log_file', metavar='LOGFILE')
        parser.add_argument('mode', choices=['server', 'client', 'list', 'restore'])

        args, unknown = parser.parse_known_args(argv)

        self._mode = args.mode

        log_level = getattr(logging, args.verbose)
        logger_config = {'level': log_level, 'format':'[%(levelname)-7s] - %(asctime)s - %(message)s'}

        if args.log_file:
            logger_config['filename'] = args.log_file
        
        logging.basicConfig(**logger_config)

        if args.log_file:
            logging.info('-' * 20)

        logging.info('Starting re-store-it')

        try:
            module = importlib.import_module(self._mode)
            ModeClass = getattr(module, self._mode.capitalize())
            self._runner = ModeClass(parser, argv)
        except AttributeError:
            raise RuntimeError('Unknown mode %s' % self._mode)

    def run(self):
        logging.info('Starting re-store-it in %s mode' % self._mode)
        
        self._thread = threading.Thread(target=self._runner.run)
        self._thread.start()

        logging.info('Running...')

    def stop(self, signum, frame):
        logging.info('Stopping re-store-it')

        stop_thread = threading.Thread(target=self._runner.stop)
        stop_thread.start()
        
        self._thread.join()
        stop_thread.join()

    def thread_ok(self):
        return self._thread.is_alive()

if __name__ == "__main__":
    try:
        restoreit = ReStoreIt(sys.argv[1:])

        signal.signal(signal.SIGINT, restoreit.stop)
        signal.signal(signal.SIGTERM, restoreit.stop)

        restoreit.run()

        while True:
            if restoreit.thread_ok():
                sleep(1)
            else:
                break
    except RuntimeError as e:
        logging.error(e)
    except IOError as e:
        pass # Probably due to the threads stopping
